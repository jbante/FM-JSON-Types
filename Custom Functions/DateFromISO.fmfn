/*******************************************************************************
 * DateFromISO ( iso8601Date )
 * Parses date data formatted according to ISO 8601, and casts it to a
 * FileMaker date. Dates with limited accuracy will return the first date in the
 * specified period.
 *
 * @parameter iso8601Date: text encoding a date in ISO 8601 format
 *
 * @return A date
 *
 * @history 2013-01-25 - Jeremy Bante <http://scr.im/fugue> - Created
 * @history 2017-04-06 - Jeremy Bante <http://scr.im/fugue> - Expanding to
 * additional allowed formats
 * @history 2017-04-08 - Jeremy Bante <http://scr.im/fugue> - Refactoring
 * @history 2017-04-25 - Daniel Smith <dan@filemaker.consulting> - Add
 * exceptions for JSONGetElement error and empty parameter
 * @history 2017-04-27 - Jeremy Bante <http://scr.im/fugue> - Removing exception
 * for JSONGetElement result error. Adjusting response to empty date input to
 * behave similarly for timestamp input.
 * @history 2017-10-02 - Jeremy Bante <http://scr.im/fugue> - Tolerating spaces
 * as timestamp delimiters.
 *
 * @see https://en.wikipedia.org/wiki/ISO_8601
 ******************************************************************************/

Let ( [
	_delimiterPosition =
		Max (
			Position ( iso8601Date ; "T" ; 1 ; 1 ) ;
			Position ( iso8601Date ; " " ; 1 ; 1 )
		) ;
	_text =
		If ( _delimiterPosition = 0 ;
			iso8601Date ;
			/* Else */ Left ( iso8601Date ; _delimiterPosition - 1 )
		) ;

	_firstHyphen = Position ( _text ; "-" ; 1 ; 1 ) ;
	_totalLength = Length ( _text ) ;
	_invalid = _firstHyphen = 1 or _totalLength < 7 ;
	_hyphenFormat = _firstHyphen > 0 ;
	_weekFormat = Middle ( _text ; If ( _hyphenFormat ; 6 ; 5 ) ; 1 ) = "W" ;
	_ordinalFormat =
		not _weekFormat and _totalLength = If ( _hyphenFormat ; 8 ; 7 ) ;

	_year = Left ( _text ; 4 )
] ;
	Case (
		IsEmpty ( _text ) ; "" ;

		_invalid ;	"? Not a valid ISO 8601 dateÂ¶  " & iso8601Date ;

		_weekFormat ;
			Let ( [
					_jan4 = Date ( 1 ; 4 ; _year ) ;
					_jan4DayOfISOWeek = Mod ( DayOfWeek ( _jan4 ) - 2 ; 7 ) ;
					_startOfFirstISOWeek = _jan4 - _jan4DayOfISOWeek ;
					_week =
						Middle ( _text ; If ( _hyphenFormat ; 7 ; 6 ) ; 2 ) ;
					_day =
						Middle ( _text ; If ( _hyphenFormat ; 10 ; 8 ) ; 3 ) ;
					_day = If ( IsEmpty ( _day ) ; 1 ; /* Else */ _day )
			] ;
				_startOfFirstISOWeek + 7 * ( _week - 1 ) + _day - 1
			) ;

		_ordinalFormat ;
			Date (
				1 ;
				Middle ( _text ; If ( _hyphenFormat ; 6 ; 5 ) ; 3 ) ;
				_year
			) ;

		/* Else */
			Let ( [
				_month = Middle ( _text ; If ( _hyphenFormat ; 6 ; 5 ) ; 2 ) ;
				_day = Middle ( _text ; If ( _hyphenFormat ; 9 ; 7 ) ; 2 ) ;
				_day = If ( IsEmpty ( _day ) ; 1 ; /* Else */ _day )
			] ;
				Date ( _month ; _day ; _year )
			)
	)
)